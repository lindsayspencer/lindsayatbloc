Working with Agile Teams

Agile
Agile is a product development methodology focused on creating quickly with a user-focus. Agile teams practice learning quickly (“failing fast”), continuous integration or delivery, and iterative development cycles. This was developed by 14 leading figures in the software industry, who pulled from their combined experience the approaches that are the most effective for software development.
Agilemanifesto.org -
Prioritize: individuals and interactions, working software, customer collaboration, and responding to change.
Satisfy the customer through early and continuous delivery of valuable software.
Welcome changes, even late in the process. Change can give you a competitive advantage by staying ahead of the curve.
Deliver software quickly
Business people and developers must work together on a daily basis throughout the project.
Build projects around motivated individuals by giving them the environment, space, and trust needed to shine.
Face-to-face conversation is the most efficient and effective way to communicate with a development team.
Working software is the primary measure of progress.
Agile processes promote sustainable development. A constant pace should be maintained.
Attention to technical excellence and good design enhances agility.
Simplicity (maximizing the amount of work not done) is essential!
The best work comes from self-organizing teams.
The team regularly reflects on their own practices, discussing how to become more effective, implementing changes.

Agile Teams
Cross-functional: composed of members with different roles working together to achieve a common goal (#4).
A typical team:
Product Manager (PM) or Product Owner - responsible for the strategy, roadmap, and feature definition of a product or product line
Project Manager (APM) - responsible for the process management and on-time delivery of the work of its teams
Designer - responsible for the look and feel of a product through creating mockups, wireframes, and interactions for the product
User Researcher - responsible for understanding the users (the reasons behind their behavior, wants, needs, priorities, etc.) by running tests, performing user research, and creating personas (a profile of a target user)
Team Lead - responsible for the technical management, direction, and quality of projects (may be a contributor and/or manager)
Developer - responsible for the technical creation, maintenance, and overall integrity of the project

Kanban Boards
Agile teams rely on a Kanban board to stay organized, such as Trello. They use columns that hold cards such as:
Backlog - cards for the entire project
Committed - cards that the team will complete in this sprint
Blocked - cards that cannot be worked (maybe awaiting clarification from Product Owner)
In progress - cards that the team is currently working
In test - completed cards that are being tested and not yet deployed to production
Deployed - cards that are in production awaiting approval from a Product Owner or Designer
Approved - holds cards of completed and approved work

Dual-Track System
Teams work on research and product design (Discovery) concurrently as the development (Delivery) of a proven product. This way, no one team is waiting for the other to finish something before reacting or moving on (asynchronous lol)
Discovery - the Designers, User Researchers, and Product Owner work together to think up, test, and design a new product or feature. A Developer may be enlisted to help create a high-fidelity prototype, A/B test (split or bucket testing), or 404 test (to gauge user interaction and interest level).
Delivery - the Project Manager, Team Lead, and Developer(s) work together to build a proven feature under the guidance of the other team.

Agile Processes - Sprint cycles
Sprints are time-delimited periods of work ranging from one to four weeks. The goal is to deploy a functional piece at the end.
The cycle usually includes:
Product Manager adds feature cards and the Team Lead adds technical cards to the Kanlan board and add them to the Backlog column.
Prioritization - between the PM and Team Lead to discuss the top goals of the sprint
Each team member reads the topmost cards in the Backlog.
Estimation - between the Team Lead and Developer(s) with the goal of tasking out, then assigning time and complexity values to each card.
Planning - PM and development team meet and commit to a set of goals (the number of cards committed depends on developer availability and velocity = average number of points per sprint a dev team completes)
The work happens! The cards get moved along the columns until they’re Deployed.
Review - the Product Owner reviews all of the work in the Deployed column to approve or reject it. The dev team gets to show off.
Retrospective - the dev team’s chance to make changes to their process, discussed at a meeting with the devs and Team Lead. An Action Item and Owner are assigned to changes that need to be made.
Rinse and Repeat!

Cards (Kanlan Board)
Smallest unit of work that can provide value to a user. Cards include:
Estimation
This is done before a card is committed to a sprint.
Chosen based on size and complexity of the card’s work relative to the entire project (not relative to time)
The whole team agrees on a value - can use something like https://scrumpoker.online/
More info: http://tastycupcakes.org/2009/06/doggy-planning/
User Story - “As a ___, I want ___, so ___.” May be from the perspective of the user, dev, or product owner.
Tasks - include every item that must be done for the card to be complete.
Epic -
Any additional details

Organizing Work
Dev teams have multiple projects going, but only actively develop one piece at a time. The PM may have many new ideas for the Discovery team. Each new idea/project will comprise an Epic. That work can further be broken down horizontally (by feature) or vertically (by stack layer) into slices. Slices allow for visual progress and visual milestones on larger projects. They consist of cards necessary to complete that goal.
Example:
Adding a new User Registration page. This story (project) would be classified as an epic (a new idea to work on). We could slice it into a page front, page behind, client-side scripting, and API. Or, we could slice it into registration form, create a new user, on registration fail, and on registration success.
